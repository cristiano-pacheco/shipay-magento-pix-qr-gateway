<?php

declare(strict_types=1);

/**
 * DISCLAIMER
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category Shipay
 * @package Shipay_PixQrGateway
 * @copyright Copyright (c) 2021 Shipay
 * @author Shipay <ajuda@shipay.com.br>
 *
 * See LICENSE for license details.
 */

namespace Shipay\PixQrGateway\Model;

use Magento\Framework\App\ResourceConnection;
use Magento\Framework\Exception\LocalizedException;
use Magento\Framework\Phrase;
use Shipay\PixQrGateway\Api\Data\WebhookDataInterface;
use Shipay\PixQrGateway\Api\WebhookInterface;
use Shipay\PixQrGateway\Gateway\Config\Config;
use Shipay\PixQrGateway\Gateway\StatusUpdater\Client;
use Shipay\PixQrGateway\Gateway\StatusUpdater\Handler;
use Shipay\PixQrGateway\Gateway\StatusUpdater\Model\PendingTransaction;

class Webhook implements WebhookInterface
{
    /**
     * @var ResourceConnection
     */
    private $resourceConnection;

    /**
     * @var PendingTransaction
     */
    private $transaction;

    /**
     * @var Handler
     */
    private $handler;

    /**
     * @var Client
     */
    private $client;

    /**
     * @var Config
     */
    private $config;

    /**
     * @var array
     */
    private $secretKeyHeaders = [
        self::SHIPAY_SECRET_KEY_HEADER,
        self::SHIPAY_SECRET_KEY_HEADER_CAMEL,
        self::SHIPAY_SECRETKEY_HEADER,
        self::SHIPAY_SECRETKEY_HEADER_CAMEL,
    ];

    /**
     * Webhook constructor.
     * @param ResourceConnection $resourceConnection
     * @param PendingTransaction $transaction
     * @param Handler $handler
     * @param Client $client
     * @param Config $config
     */
    public function __construct(
        ResourceConnection $resourceConnection,
        PendingTransaction $transaction,
        Handler $handler,
        Client $client,
        Config $config
    ) {
        $this->resourceConnection = $resourceConnection;
        $this->transaction = $transaction;
        $this->handler = $handler;
        $this->client = $client;
        $this->config = $config;
    }

    /**
     * @inheritDoc
     */
    public function processNotification($order_id)
    {
        $this->validateRequest();

        $connection = $this->resourceConnection->getConnection();

        $order = $connection->fetchRow(
            $this->transaction->getPaymentTransaction($order_id)
        );

        if ($order === false) {
            return false;
        }

        $transaction = $this->client->placeRequestByOrder($order);

        return $this->handler->handleOrderUpdate($transaction);
    }

    /**
     * @throws LocalizedException
     */
    private function validateRequest()
    {
        // phpcs:disable
        $headers = getallheaders();
        // phpcs:enable
        $headerNames = array_keys($headers);
        $shipayHeader = null;

        foreach ($this->secretKeyHeaders as $secretKeyHeader) {
            if (in_array($secretKeyHeader, $headerNames)) {
                $shipayHeader = $headers[$secretKeyHeader];
                break;
            }
        }

        if (!$shipayHeader || $shipayHeader !== $this->config->getSecretKey()) {
            $this->throwException();
        }
    }

    /**
     * @throws LocalizedException
     */
    private function throwException()
    {
        throw new LocalizedException(new Phrase('Invalid Request'));
    }
}
