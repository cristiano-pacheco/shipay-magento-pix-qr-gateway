<?php

declare(strict_types=1);

/**
 * DISCLAIMER
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category Shipay
 * @package Shipay_PixQrGateway
 * @copyright Copyright (c) 2021 Shipay
 * @author Shipay <ajuda@shipay.com.br>
 *
 * See LICENSE for license details.
 */

namespace Shipay\PixQrGateway\Gateway\StatusUpdater\Model;

use Magento\Framework\App\ResourceConnection;
use Magento\Framework\DB\Adapter\AdapterInterface;
use Magento\Framework\DB\Select;
use Psr\Log\LoggerInterface;
use Shipay\PixQrGateway\Model\Ui\ConfigProvider;

class PendingTransaction
{
    /**
     * @var AdapterInterface
     */
    protected $connection;

    /**
     * @var LoggerInterface
     */
    private $logger;

    /**
     * PendingTransaction constructor.
     * @param ResourceConnection $resourceConnection
     * @param LoggerInterface $logger
     */
    public function __construct(
        ResourceConnection $resourceConnection,
        LoggerInterface $logger
    ) {
        $this->connection = $resourceConnection->getConnection();
        $this->logger = $logger;
    }

    /**
     * @return array
     * @throws \Exception
     */
    public function getOrders()
    {
        try {
            return $this->connection->fetchAll($this->getPaymentTransactions());
        } catch (\Exception $e) {
            $this->logger
                ->critical("Error in OrderStatusUpdater::getOrders --> line " . __LINE__ . "\n" . $e->getMessage());
            throw $e;
        }
    }

    /**
     * @return Select
     */
    public function getPaymentTransactions()
    {
        $sql = $this->connection->select()
            ->from(
                ['so' => $this->connection->getTableName('sales_order')],
                ['so.entity_id as order_id', 'grand_total']
            )->joinInner(
                ['sop' => $this->connection->getTableName('sales_order_payment')],
                '`so`.`entity_id` = `sop`.`parent_id`',
                ['so.entity_id as payment_id']
            )->joinInner(
                ['spt' => $this->connection->getTableName('sales_payment_transaction')],
                '`sop`.`entity_id` = `spt`.`payment_id`',
                ['spt.txn_id as transaction_id']
            )
            ->where('`so`.`status` = ?', 'pending_payment')
            ->where('`sop`.`method` = ?', ConfigProvider::CODE)
            ->where('`sop`.`is_shipay_status_closed` is null or `sop`.`is_shipay_status_closed` = ?', 0)
            ->where('`spt`.`txn_type` = ?', 'authorization');

        return $sql;
    }

    /**
     * @return Select
     */
    public function getPaymentTransaction($transactionId)
    {
        $sql = $this->connection->select()
            ->from(
                ['so' => $this->connection->getTableName('sales_order')],
                ['so.entity_id as order_id', 'grand_total']
            )->joinInner(
                ['sop' => $this->connection->getTableName('sales_order_payment')],
                '`so`.`entity_id` = `sop`.`parent_id`',
                ['so.entity_id as payment_id']
            )->joinInner(
                ['spt' => $this->connection->getTableName('sales_payment_transaction')],
                '`sop`.`entity_id` = `spt`.`payment_id`',
                ['spt.txn_id as transaction_id']
            )
            ->where('`sop`.`method` = ?', ConfigProvider::CODE)
            ->where('`spt`.`txn_type` = ?', 'authorization')
            ->where('`sop`.`last_trans_id` = ?', $transactionId);

        return $sql;
    }
}
