<?php

declare(strict_types=1);

/**
 * DISCLAIMER
 *
 * Do not edit this file if you want to update this module for future new versions.
 *
 * @category Shipay
 * @package Shipay_PixQrGateway
 * @copyright Copyright (c) 2021 Shipay
 * @author Shipay <ajuda@shipay.com.br>
 *
 * See LICENSE for license details.
 */

namespace Shipay\PixQrGateway\Gateway\StatusUpdater;

use Shipay\PixQrGateway\Gateway\Enums\PaymentStatus;
use Shipay\PixQrGateway\Gateway\StatusUpdater\Model\Invoicer;
use Shipay\PixQrGateway\Gateway\StatusUpdater\Model\PaymentFinisher;

class Handler
{
    /**
     * @var Client
     */
    private $client;

    /**
     * @var Invoicer
     */
    private $invoicer;

    /**
     * @var PaymentFinisher
     */
    private $paymentFinisher;

    /**
     * Handler constructor.
     * @param Client $client
     * @param Invoicer $invoicer
     * @param PaymentFinisher $paymentFinisher
     */
    public function __construct(
        Client $client,
        Invoicer $invoicer,
        PaymentFinisher $paymentFinisher
    ) {
        $this->client = $client;
        $this->invoicer = $invoicer;
        $this->paymentFinisher = $paymentFinisher;
    }

    /**
     * @throws \Exception
     */
    public function handle()
    {
        $transactions = $this->client->placeRequest();

        if (empty($transactions)) {
            return false;
        }

        $updatedOrders = [];

        foreach ($transactions as $transaction) {
            $updatedOrders[] = $this->handleOrderUpdate($transaction);
        }

        return $this->getUpdatedOrders($updatedOrders);
    }

    /**
     * @param array $transaction
     * @return bool
     */
    public function handleOrderUpdate($transaction)
    {
        if (!isset($transaction['status']) ||
            !isset($transaction['payment_id']) ||
            !isset($transaction['order_id'])
        ) {
            return false;
        }

        if ($transaction['status'] === PaymentStatus::EXPIRED) {
            $this->paymentFinisher->closePayment($transaction['payment_id'], $transaction['status']);
            return $transaction['order_id'];
        }

        if ($transaction['status'] === PaymentStatus::PAID) {
            $orderId = $this->invoicer->invoice($transaction['order_id']);
            $this->paymentFinisher->closePayment($transaction['order_id'], $transaction['status']);
            return $orderId;
        }

        return true;
    }

    /**
     * @param array $updatedOrders
     * @return string
     */
    private function getUpdatedOrders($updatedOrders)
    {
        $orders = '';
        foreach ($updatedOrders as $order) {
            if ($order) {
                $orders .= " $order ";
            }
        }

        return $orders;
    }
}
